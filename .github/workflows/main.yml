name: "Build & Release"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Flutter Setup
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      - name: Install dependencies
        run: flutter pub get

      - name: Auto format the dart code
        run: dart format .

      - name: Verify the dart code is formatted
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze the dart code
        run: flutter analyze --fatal-warnings

      - name: Accept Android Licenses
        run: yes | flutter doctor --android-licenses

      - name: Set up Android Emulator
        run: |
          echo ">>> ANDROID_HOME: $ANDROID_HOME"
          echo ">>> Listing Android SDK directory:"
          ls -l $ANDROID_HOME
          echo ">>> Updating SDK manager:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update || exit 1
          echo ">>> Installed packages:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list || exit 1
          echo ">>> Ensuring emulator, platform-tools, and ARM64 system image are present:"
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "emulator" "system-images;android-34;google_apis;arm64-v8a" || exit 1
          echo ">>> Deleting previously created test AVD, if exists:"
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager delete avd -n test || true
          echo ">>> Creating new AVD:"
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-34;google_apis;arm64-v8a" --device "pixel" --force || exit 1
          echo ">>> Listing available AVDs:"
          $ANDROID_HOME/emulator/emulator -list-avds || exit 1
          echo ">>> Starting emulator:"
          $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader_indirect &
          EMU_PID=$!
          echo ">>> Waiting for emulator to boot (PID: $EMU_PID)..."
          adb wait-for-device
          adb shell getprop sys.boot_completed | grep -m 1 '1'
          adb shell input keyevent 82
          sleep 30
          echo ">>> Emulator boot process complete."

      - name: Run tests on Emulator
        run: flutter test

      - name: Build APK
        run: flutter build apk --release --split-per-abi

      - name: Build iOS
        run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload  

      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*,build/ios/iphoneos/app.ipa"
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}