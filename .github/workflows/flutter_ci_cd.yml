name: Flutter Development Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.35.2'
  JAVA_VERSION: '17'

jobs:

  # Code Quality and Testing
  analyze_and_test:
    name: Code Analysis & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Verify Flutter installation
        run: flutter doctor -v

      - name: Format code automatically
        run: |
          echo "🎨 Auto-formatting Dart code..."
          dart format .
          echo "✅ Code formatting completed"

      - name: Analyze code with strict linting
        run: |
          echo "🔍 Running Flutter analysis with strict linting..."
          flutter analyze --fatal-infos --fatal-warnings
          echo "✅ Code analysis completed successfully"

      - name: Run unit tests
        run: flutter test --coverage


  # Android Build Jobs
  build_android_debug:
    name: Build Android Debug APK
    runs-on: ubuntu-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Build Android Debug APK
        run: flutter build apk --debug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 30

      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        if: ${{ secrets.FIREBASE_APP_ID && secrets.FIREBASE_TOKEN }}
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-debug.apk
          releaseNotes: |
            🚀 Debug Build - ${{ github.sha }}
            
            📝 Changes:
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.event.head_commit.message }}
            - Author: ${{ github.actor }}
            
            🔗 View changes: ${{ github.event.compare }}



  # iOS Build Jobs
  build_ios_debug:
    name: Build iOS Debug IPA
    runs-on: macos-latest
    needs: analyze_and_test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build iOS (No Codesign)
        run: flutter build ios --debug --no-codesign

      - name: Create Debug IPA
        run: |
          cd build/ios/iphoneos/
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r ../../../ios-debug.ipa Payload/

      - name: Upload Debug IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug-ipa
          path: ios-debug.ipa
          retention-days: 30


  # Build Summary
  build_summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [ build_android_debug, build_ios_debug ]
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## 🛠️ Flutter Development Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Android | Debug APK | ${{ needs.build_android_debug.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS | Debug IPA | ${{ needs.build_ios_debug.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Download debug artifacts from the Actions tab" >> $GITHUB_STEP_SUMMARY
          echo "- Test the debug builds on your devices" >> $GITHUB_STEP_SUMMARY
          echo "- Review test coverage results" >> $GITHUB_STEP_SUMMARY
          echo "- Check code formatting and linting issues if any" >> $GITHUB_STEP_SUMMARY

